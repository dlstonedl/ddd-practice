@startuml

namespace config <<Config SubDomain>> <<ConfigContext>> {
  class ParkingManager <<Entity>> <<Aggregate Root>> {
     ParkingManagerId id
     List<ParkingBoyId> parkingBoyIds
  }
  class ParkingBoy <<Entity>> <<Aggregate Root>> {
    ParkingBoyId id
    List<ParkingLotId> parkingLotIds
    ParkingStrategyName parkingStrategyName
  }
  enum ParkingStrategyName
  ParkingBoy --> ParkingStrategyName

  ParkingManager --[hidden] ParkingBoy
}

package parking <<Core Domain>> <<ParkingContext>>{
  package core <<core>> {
    interface FindParkingLotService <<Service>>
    interface ParkingLotFinderSpecification
    interface ParkingLotFinderFactory
    interface ParkingLotFinder
    class ParkingLot
    Class Ticket <<Value Object>>
    class Car <<Value Object>>

    FindParkingLotService .down.> ParkingLotFinderSpecification
    ParkingLotFinderFactory .down.> ParkingLotFinder
    ParkingLot "1" o-down-> "many" Ticket
    Ticket "1" -right-> "1" Car

    FindParkingLotService  -[hidden]right-  ParkingLotFinderFactory
    ParkingLotFinderFactory -[hidden]right- ParkingLot
  }

  package finder {
    class ParkingManager
    class ParkingBoy
    class ParkingManagerSpecification
    class ParkingBoySpecification
    interface Strategy

    ParkingManager ..up|> ParkingLotFinder
    ParkingBoy ..up|> ParkingLotFinder

    ParkingManager  "1" o--right> "many" ParkingBoy
    ParkingBoy -down-> Strategy

    ParkingManagerSpecification ..up|> ParkingLotFinderSpecification
    ParkingBoySpecification ..up|> ParkingLotFinderSpecification

    config.ParkingBoy ..left> ParkingBoy :"         translate\n        parkingManager类似 "
  }

  package policy {
    class SortedStrategy
    class MaxIdleStrategy

    SortedStrategy ..up|> Strategy
    MaxIdleStrategy ..up|> Strategy
  }

  interface FindParkingLotService {
      ParkingLot findParkingLot(ParkingLotFinderSpecification)
      List<ParkingLot> findAvailableParkingLots(ParkingLotFinderSpecification)
  }

  interface ParkingLotFinderSpecification {
    ParkingLotFinder newParkingLotFinder()
  }

  interface ParkingLotFinderFactory {
    ParkingLotFinder newParkingManager()
    ParkingLotFinder newParkingBoy(ParkingBoyId)
  }

  interface ParkingLotFinder {
    ParkingLot findParkingLotToPark()
    List<ParkingLot> getAvailableParkingLots()
  }

  class ParkingLot <<Entity>> <<Aggregate Root>> {
      ParkingLotId id
      int capacity
      Map <Ticket, Car> parkedCars

      + Ticket park(Car car)
      + Car take(Ticket ticket)
      int availableLots()
  }

  Class Car {
    CardId id
  }

  class ParkingManager <<Value Object>> {
    List<ParkingBoy> parkingBoys
  }

  class ParkingBoy <<Value Object>> {
    List<ParkingLot> parkingLots
  }

  interface Strategy {
    ParkingLot selectParkingLot(List<ParkingLot> parkingLots)
  }
}
@enduml
